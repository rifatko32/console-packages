package ru.hofftech.consolepackages.service.report.billing;

import lombok.RequiredArgsConstructor;
import ru.hofftech.consolepackages.datastorage.model.entity.OperationType;
import ru.hofftech.consolepackages.model.dto.billing.BillingByUserSummaryResponse;
import ru.hofftech.consolepackages.service.billing.PackageBillingService;
import ru.hofftech.consolepackages.service.report.PlaneStringReport;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import static ru.hofftech.consolepackages.util.DateUtils.DATE_FORMAT;

/**
 * Implementation of {@link UserBillingReportEngine} that generates a report of billing orders for a user by period.
 * <p>
 * This implementation uses a repository to retrieve billing orders for a user by period.
 * The report is generated by grouping the billing orders by date and operation type.
 * </p>
 */
@RequiredArgsConstructor
public class UserBillingReportImpl implements UserBillingReportEngine {

    private final PackageBillingService packageBillingService;

    /**
     * Generates a report of billing orders for a user within a specified period.
     *
     * @param userId   the ID of the user for whom to generate the report
     * @param fromDate the start date of the period
     * @param toDate   the end date of the period
     * @return a {@link PlaneStringReport} containing the billing orders grouped by date and operation type
     */
    @Override
    public PlaneStringReport generateByPeriod(String userId, LocalDate fromDate, LocalDate toDate) {
        var orders = packageBillingService.returnBillingSummaryByClient(userId, fromDate, toDate);

        if (orders.isEmpty()) {
            return new PlaneStringReport();
        }

        var result = new PlaneStringReport();

        for (var order : orders) {
            result.addReportString(formatToreportString(order));
        }

        return result;
    }

    private String formatToreportString(BillingByUserSummaryResponse orderSummary) {
        return String.format(
                "%s; %s; %s машин; %s посылок; %s рублей",
                orderSummary.date().format(DateTimeFormatter.ofPattern(DATE_FORMAT)),
                OperationType.returnLabel(orderSummary.operationType()),
                orderSummary.truckCount(),
                orderSummary.packageCount(),
                orderSummary.amount());
    }
}